// eslint-disable-next-line import/no-extraneous-dependencies
import { Authorized } from 'type-graphql';
import type { ResolversEnhanceMap } from '../generated';
import { roleArray } from '../utils/roleArray';

const resolversEnhanceMap: ResolversEnhanceMap = {
  Movement: {
    movements: [Authorized(roleArray('USER'))],
    movement: [Authorized(roleArray('USER'))],
    aggregateMovement: [Authorized(roleArray('USER'))],
    findFirstMovement: [Authorized(roleArray('USER'))],
    groupByMovement: [Authorized(roleArray('USER'))],

    createManyMovement: [Authorized(roleArray('ADMIN'))],
    createOneMovement: [Authorized(roleArray('ADMIN'))],
    deleteManyMovement: [Authorized(roleArray('ADMIN'))],
    deleteOneMovement: [Authorized(roleArray('ADMIN'))],
    updateManyMovement: [Authorized(roleArray('ADMIN'))],
    updateOneMovement: [Authorized(roleArray('ADMIN'))],
    upsertOneMovement: [Authorized(roleArray('ADMIN'))],
  },
  City: {
    city: [Authorized(roleArray('USER'))],
    cities: [Authorized(roleArray('USER'))],
    aggregateCity: [Authorized(roleArray('USER'))],
    findFirstCity: [Authorized(roleArray('USER'))],
    groupByCity: [Authorized(roleArray('USER'))],

    createManyCity: [Authorized(roleArray('ADMIN'))],
    createOneCity: [Authorized(roleArray('ADMIN'))],
    deleteManyCity: [Authorized(roleArray('ADMIN'))],
    deleteOneCity: [Authorized(roleArray('ADMIN'))],
    updateManyCity: [Authorized(roleArray('ADMIN'))],
    updateOneCity: [Authorized(roleArray('ADMIN'))],
    upsertOneCity: [Authorized(roleArray('ADMIN'))],
  },
  Company: {
    companies: [Authorized(roleArray('USER'))],
    company: [Authorized(roleArray('USER'))],
    aggregateCompany: [Authorized(roleArray('USER'))],
    findFirstCompany: [Authorized(roleArray('USER'))],
    groupByCompany: [Authorized(roleArray('USER'))],

    createManyCompany: [Authorized(roleArray('ADMIN'))],
    createOneCompany: [Authorized(roleArray('ADMIN'))],
    deleteManyCompany: [Authorized(roleArray('ADMIN'))],
    deleteOneCompany: [Authorized(roleArray('ADMIN'))],
    updateManyCompany: [Authorized(roleArray('ADMIN'))],
    updateOneCompany: [Authorized(roleArray('ADMIN'))],
    upsertOneCompany: [Authorized(roleArray('ADMIN'))],
  },
  Credits: {
    aggregateCredits: [Authorized(roleArray('USER'))],
    findFirstCredits: [Authorized(roleArray('USER'))],
    findManyCredits: [Authorized(roleArray('USER'))],
    findUniqueCredits: [Authorized(roleArray('USER'))],
    groupByCredits: [Authorized(roleArray('USER'))],

    createManyCredits: [Authorized(roleArray('ADMIN'))],
    createOneCredits: [Authorized(roleArray('ADMIN'))],
    deleteManyCredits: [Authorized(roleArray('ADMIN'))],
    deleteOneCredits: [Authorized(roleArray('ADMIN'))],
    updateManyCredits: [Authorized(roleArray('ADMIN'))],
    updateOneCredits: [Authorized(roleArray('ADMIN'))],
    upsertOneCredits: [Authorized(roleArray('ADMIN'))],
  },
  Debits: {
    aggregateDebits: [Authorized(roleArray('USER'))],
    findFirstDebits: [Authorized(roleArray('USER'))],
    findManyDebits: [Authorized(roleArray('USER'))],
    findUniqueDebits: [Authorized(roleArray('USER'))],
    groupByDebits: [Authorized(roleArray('USER'))],

    createManyDebits: [Authorized(roleArray('ADMIN'))],
    createOneDebits: [Authorized(roleArray('ADMIN'))],
    deleteManyDebits: [Authorized(roleArray('ADMIN'))],
    deleteOneDebits: [Authorized(roleArray('ADMIN'))],
    updateManyDebits: [Authorized(roleArray('ADMIN'))],
    updateOneDebits: [Authorized(roleArray('ADMIN'))],
    upsertOneDebits: [Authorized(roleArray('ADMIN'))],
  },
  File: {
    aggregateFile: [Authorized(roleArray('USER'))],
    findFirstFile: [Authorized(roleArray('USER'))],
    file: [Authorized(roleArray('USER'))],
    files: [Authorized(roleArray('USER'))],
    groupByFile: [Authorized(roleArray('USER'))],

    createManyFile: [Authorized(roleArray('ADMIN'))],
    createOneFile: [Authorized(roleArray('ADMIN'))],
    deleteManyFile: [Authorized(roleArray('ADMIN'))],
    deleteOneFile: [Authorized(roleArray('ADMIN'))],
    updateManyFile: [Authorized(roleArray('ADMIN'))],
    updateOneFile: [Authorized(roleArray('ADMIN'))],
    upsertOneFile: [Authorized(roleArray('ADMIN'))],
  },
  PostalCard: {
    aggregatePostalCard: [Authorized(roleArray('USER'))],
    findFirstPostalCard: [Authorized(roleArray('USER'))],
    postalCard: [Authorized(roleArray('USER'))],
    postalCards: [Authorized(roleArray('USER'))],
    groupByPostalCard: [Authorized(roleArray('USER'))],

    createManyPostalCard: [Authorized(roleArray('ADMIN'))],
    createOnePostalCard: [Authorized(roleArray('ADMIN'))],
    deleteManyPostalCard: [Authorized(roleArray('ADMIN'))],
    deleteOnePostalCard: [Authorized(roleArray('ADMIN'))],
    updateManyPostalCard: [Authorized(roleArray('ADMIN'))],
    updateOnePostalCard: [Authorized(roleArray('ADMIN'))],
    upsertOnePostalCard: [Authorized(roleArray('ADMIN'))],
  },
  PostingUnit: {
    aggregatePostingUnit: [Authorized(roleArray('USER'))],
    findFirstPostingUnit: [Authorized(roleArray('USER'))],
    postingUnit: [Authorized(roleArray('USER'))],
    postingUnits: [Authorized(roleArray('USER'))],
    groupByPostingUnit: [Authorized(roleArray('USER'))],

    createManyPostingUnit: [Authorized(roleArray('ADMIN'))],
    createOnePostingUnit: [Authorized(roleArray('ADMIN'))],
    deleteManyPostingUnit: [Authorized(roleArray('ADMIN'))],
    deleteOnePostingUnit: [Authorized(roleArray('ADMIN'))],
    updateManyPostingUnit: [Authorized(roleArray('ADMIN'))],
    updateOnePostingUnit: [Authorized(roleArray('ADMIN'))],
    upsertOnePostingUnit: [Authorized(roleArray('ADMIN'))],
  },
  Service: {
    aggregateService: [Authorized(roleArray('USER'))],
    findFirstService: [Authorized(roleArray('USER'))],
    service: [Authorized(roleArray('USER'))],
    services: [Authorized(roleArray('USER'))],
    groupByService: [Authorized(roleArray('USER'))],

    createManyService: [Authorized(roleArray('ADMIN'))],
    createOneService: [Authorized(roleArray('ADMIN'))],
    deleteManyService: [Authorized(roleArray('ADMIN'))],
    deleteOneService: [Authorized(roleArray('ADMIN'))],
    updateManyService: [Authorized(roleArray('ADMIN'))],
    updateOneService: [Authorized(roleArray('ADMIN'))],
    upsertOneService: [Authorized(roleArray('ADMIN'))],
  },
  State: {
    aggregateState: [Authorized(roleArray('USER'))],
    findFirstState: [Authorized(roleArray('USER'))],
    state: [Authorized(roleArray('USER'))],
    states: [Authorized(roleArray('USER'))],
    groupByState: [Authorized(roleArray('USER'))],

    createManyState: [Authorized(roleArray('ADMIN'))],
    createOneState: [Authorized(roleArray('ADMIN'))],
    deleteManyState: [Authorized(roleArray('ADMIN'))],
    deleteOneState: [Authorized(roleArray('ADMIN'))],
    updateManyState: [Authorized(roleArray('ADMIN'))],
    updateOneState: [Authorized(roleArray('ADMIN'))],
    upsertOneState: [Authorized(roleArray('ADMIN'))],
  },

  User: {
    aggregateUser: [Authorized(roleArray('USER'))],
    findFirstUser: [Authorized(roleArray('USER'))],
    user: [Authorized(roleArray('USER'))],
    users: [Authorized(roleArray('USER'))],
    groupByUser: [Authorized(roleArray('USER'))],

    createManyUser: [Authorized(roleArray('ADMIN'))],
    createOneUser: [Authorized(roleArray('ADMIN'))],
    deleteManyUser: [Authorized(roleArray('ADMIN'))],
    deleteOneUser: [Authorized(roleArray('ADMIN'))],
    updateManyUser: [Authorized(roleArray('ADMIN'))],
    updateOneUser: [Authorized(roleArray('ADMIN'))],
    upsertOneUser: [Authorized(roleArray('ADMIN'))],
  },
};

export { resolversEnhanceMap };
